from enum import Enum
from datetime import datetime

# Enums
class ReservationStatus(Enum):
    """Enumeration of possible reservation statuses."""
    BOOKED = "Booked"
    CANCELLED = "Cancelled"
    COMPLETED = "Completed"

class RoomType(Enum):
    """Enumeration of room types available in the hotel."""
    SINGLE = "Single"
    DOUBLE = "Double"
    SUITE = "Suite"

class PaymentMethod(Enum):
    """Enumeration of accepted payment methods."""
    CARD = "Card"
    WALLET = "Wallet"
    CASH = "Cash"

# User class
class User:
    """Represents a user of the system with basic credentials and contact information."""
    def __init__(self, user_id: str, name: str, email: str, password: str):
        self.__user_id = user_id
        self.__name = name
        self.__email = email
        self.__password = password

    def get_email(self):
        """Returns the email of the user."""
        return self.__email

    def update_email(self, new_email):
        """Updates the email address of the user."""
        self.__email = new_email

    def get_name(self):
        """Returns the name of the user."""
        return self.__name

    def __str__(self):
        return f"User: {self.__name} ({self.__email})"

# Guest class
class Guest(User):
    """Extends User with guest-specific features like loyalty points and reservation history."""
    def __init__(self, user_id, name, email, password, contact_info, membership_level):
        super().__init__(user_id, name, email, password)
        self.__contact_info = contact_info
        self.__loyalty_points = 0
        self.__reservation_history = []
        self.__membership_level = membership_level

    def add_reservation(self, reservation):
        """Adds a reservation to the guest's history."""
        self.__reservation_history.append(reservation)

    def get_loyalty_points(self):
        """Returns the guest's current loyalty points."""
        return self.__loyalty_points

    def redeem_points(self, points):
        """Reduces the guest's loyalty points by the specified amount."""
        if points <= self.__loyalty_points:
            self.__loyalty_points -= points

    def get_reservation_history(self):
        """Returns a list of past reservations made by the guest."""
        return self.__reservation_history

    def __str__(self):
        return f"Guest: {self.get_name()}, Points: {self.__loyalty_points}"

# Room class
class Room:
    """Represents a hotel room including its type, price, and availability."""
    def __init__(self, room_number, room_type: RoomType, price_per_night, max_occupancy):
        self.__room_number = room_number
        self.__room_type = room_type
        self.__price_per_night = price_per_night
        self.__availability = True
        self.__max_occupancy = max_occupancy
        self.__amenities = []

    def is_available(self):
        """Returns True if the room is currently available."""
        return self.__availability

    def update_availability(self, status):
        """Sets the room's availability status."""
        self.__availability = status

    def add_amenity(self, amenity):
        """Adds an amenity to the room's list."""
        self.__amenities.append(amenity)

    def get_room_type(self):
        """Returns the type of the room."""
        return self.__room_type

    def get_price(self):
        """Returns the price per night for the room."""
        return self.__price_per_night

    def get_amenities(self):
        """Returns a list of amenities available in the room."""
        return self.__amenities

    def __str__(self):
        return f"Room {self.__room_number} ({self.__room_type.value}) - {'Available' if self.__availability else 'Occupied'}"

# Reservation class
class Reservation:
    """Represents a reservation made by a guest for a room."""
    def __init__(self, reservation_id, guest, room, check_in, check_out, num_guests):
        self.__reservation_id = reservation_id
        self.__guest = guest
        self.__room = room
        self.__check_in = check_in
        self.__check_out = check_out
        self.__status = ReservationStatus.BOOKED
        self.__num_guests = num_guests

    def cancel_reservation(self):
        """Cancels the reservation and marks the room as available."""
        self.__status = ReservationStatus.CANCELLED
        self.__room.update_availability(True)

    def update_status(self, new_status):
        """Updates the status of the reservation."""
        self.__status = new_status

    def get_duration(self):
        """Calculates the number of days between check-in and check-out."""
        in_date = datetime.strptime(self.__check_in, "%Y-%m-%d")
        out_date = datetime.strptime(self.__check_out, "%Y-%m-%d")
        return (out_date - in_date).days

    def __str__(self):
        return f"Reservation {self.__reservation_id} - {self.__status.value}"

# Invoice class
class Invoice:
    """Represents a billing invoice associated with a reservation."""
    def __init__(self, invoice_id, reservation, charges, discount, issued_date):
        self.__invoice_id = invoice_id
        self.__reservation = reservation
        self.__charges = charges
        self.__discount = discount
        self.__issued_date = issued_date
        self.__total = 0.0

    def calculate_total(self):
        """Calculates the total amount after applying the discount."""
        subtotal = sum(self.__charges.values())
        self.__total = subtotal - (subtotal * self.__discount / 100)
        return self.__total

    def apply_discount(self, percent):
        """Applies a new discount percentage to the invoice."""
        self.__discount = percent

    def __str__(self):
        return f"Invoice {self.__invoice_id} - Total: {self.__total:.2f}"

# Payment class
class Payment:
    """Represents a payment made for an invoice."""
    def __init__(self, payment_id, invoice, method: PaymentMethod, amount, timestamp):
        self.__payment_id = payment_id
        self.__invoice = invoice
        self.__method = method
        self.__status = "Pending"
        self.__timestamp = timestamp
        self.__amount = amount

    def mark_as_paid(self):
        """Marks the payment as completed."""
        self.__status = "Paid"

    def change_method(self, new_method: PaymentMethod):
        """Changes the payment method used."""
        self.__method = new_method

    def __str__(self):
        return f"Payment {self.__payment_id} - {self.__status} via {self.__method.value}"

# Feedback class
class Feedback:
    """Stores a guest's feedback related to a reservation."""
    def __init__(self, feedback_id, guest, rating, comments, submitted_on, category):
        self.__feedback_id = feedback_id
        self.__guest = guest
        self.__rating = rating
        self.__comments = comments
        self.__submitted_on = submitted_on
        self.__category = category

    def edit_comment(self, new_comment):
        """Edits the feedback comment."""
        self.__comments = new_comment

    def update_rating(self, new_rating):
        """Updates the feedback rating."""
        self.__rating = new_rating

    def __str__(self):
        return f"Feedback by {self.__guest.get_name()}: {self.__rating} stars - {self.__category}"


# Part C Test Cases 
if __name__ == "__main__":
    print("\n--- Guest Account Creation ---")
    guest1 = Guest("G100", "Saif Ali", "saif9ali@gmail.com", "pass123", "050-1334867", "Gold")
    guest2 = Guest("G101", "Hamed Salem", "hamedsalem2025@gmail.com", "pass456", "055-1245789", "Silver")
    print(guest1)
    print(guest2)

    print("\n--- Room Setup and Searching ---")
    room1 = Room("301", RoomType.SUITE, 500.0, 2)
    room2 = Room("302", RoomType.SINGLE, 200.0, 1)
    room1.add_amenity("Wi-Fi")
    room2.add_amenity("Wi-Fi")

    available_rooms = [r for r in [room1, room2] if r.is_available() and "Wi-Fi" in r.get_amenities()]
    for r in available_rooms:
        print("Available room:", r)

    print("\n--- Making Reservations ---")
    reservation1 = Reservation("R100", guest1, room1, "2025-05-01", "2025-05-05", 2)
    reservation2 = Reservation("R101", guest2, room2, "2025-06-01", "2025-06-03", 1)
    guest1.add_reservation(reservation1)
    guest2.add_reservation(reservation2)
    room1.update_availability(False)
    room2.update_availability(False)
    print(reservation1)
    print(reservation2)

    print("\n--- Booking Confirmations ---")
    print(f"Confirmation sent to {guest1.get_email()} for reservation {reservation1}")
    print(f"Confirmation sent to {guest2.get_email()} for reservation {reservation2}")

    print("\n--- Invoices and Payments ---")
    invoice1 = Invoice("I100", reservation1, {"Room": 2000, "Service": 200}, 10, "2025-05-01")
    invoice2 = Invoice("I101", reservation2, {"Room": 400, "Tax": 40}, 5, "2025-06-01")
    print(invoice1, "Total:", invoice1.calculate_total())
    print(invoice2, "Total:", invoice2.calculate_total())

    payment1 = Payment("P100", invoice1, PaymentMethod.CARD, invoice1.calculate_total(), "2025-05-01 12:00")
    payment2 = Payment("P101", invoice2, PaymentMethod.WALLET, invoice2.calculate_total(), "2025-06-01 15:00")
    payment1.mark_as_paid()
    payment2.mark_as_paid()
    print(payment1)
    print(payment2)

    print("\n--- Feedback Submission ---")
    feedback1 = Feedback("F100", guest1, 5, "Loved the suite and service.", "2025-05-06", "Service")
    feedback2 = Feedback("F101", guest2, 4, "Room was clean but small.", "2025-06-04", "Room")
    print(feedback1)
    print(feedback2)

    print("\n--- Reservation History ---")
    for res in guest1.get_reservation_history():
        print("Saif Ali's Reservation:", res)
    for res in guest2.get_reservation_history():
        print("Hamed Salem's Reservation:", res)

    print("\n--- Cancellation of Reservations ---")
    reservation1.cancel_reservation()
    reservation2.cancel_reservation()
    print(reservation1)
    print(reservation2)
    print("Room1 availability:", room1.is_available())
    print("Room2 availability:", room2.is_available())
